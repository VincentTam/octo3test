<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/C++ | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/c-slash-c-plus-plus/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2017-01-16T04:14:05+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    <email><![CDATA[your-email@domain.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Compared Two Poisson Variables]]></title>
      <link href="https://vincenttam.github.io/blog/2015/04/10/compared-two-poisson-variables/"/>
    
    <updated>2015-04-10T13:21:37+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/04/10/compared-two-poisson-variables</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Last Friday, I had to submit a homework which required me to evaluate
$\Pr(A &gt; B)$ and $\Pr(A = B)$, where $A$ and $B$ were two independent
Poisson random variables with parameters $\alpha$ and $\beta$
respectively.</p>

<h2 id="problem">Problem</h2>

<p>I then started evaluating the sum.</p>

<div class="myeqn">
\[
  \Pr(A &gt; B) = \sum_{i = 1}^\infty \sum_{j = 0}^{i - 1}
  \frac{e^{-\alpha} \alpha^i}{i!} \cdot \frac{e^{-\beta} \beta^j}{j!}
\]
</div>

<p>Then I was <em>stuck</em>.  I <em>couldn’t</em> compute this sum also.</p>

<div class="myeqn">
\[
  \Pr(A = B) = \sum_{i = 0}^\infty \frac{e^{-(\alpha + \beta)}
  \alpha^i \beta^i}{(i!)^2}
\]
</div>

<h2 id="fact">Fact</h2>

<p>I googled for a solution for hours, and after I saw equation (3.1) in
a paper, I gave up finding exact solutions.<sup id="fnref:fact"><a href="#fn:fact" class="footnote">1</a></sup>  As a supporter of
free software, I avoided using M$ Ex*, and wrote a program in C++ to
approximate the above probabitities by directly adding them term by
term.</p>

<h3 id="source-code">Source code</h3>

<p><figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>test.cpp</span><a class='code-highlight-caption-link' href='https://gist.github.com/c27c38c49fe8de17c815'>link</a></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="cp">#include &lt;iostream&gt;
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>#include &lt;cmath&gt;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kt">double</span> <span class="n">pXy</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">);</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kt">double</span> <span class="n">pxy</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">);</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kt">double</span> <span class="n">pAb</span><span class="p">,</span><span class="n">paB</span><span class="p">,</span><span class="n">pab</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Assume that Poisson r.v. A and B are indepedent"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Parameter for A: "</span><span class="p">;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">;</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Parameter for B: "</span><span class="p">;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Number of terms to be added (100 &lt;= N &lt;= 1000): "</span><span class="p">;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">pAb</span> <span class="o">=</span> <span class="n">pXy</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">paB</span> <span class="o">=</span> <span class="n">pXy</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">pab</span> <span class="o">=</span> <span class="n">pxy</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"P(A &gt; B) = "</span> <span class="o">&lt;&lt;</span> <span class="n">pAb</span> <span class="o">&lt;&lt;</span> <span class="s">", P(A &lt; B) = "</span> <span class="o">&lt;&lt;</span> <span class="n">paB</span> <span class="o">&lt;&lt;</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="s">", P(A = B) = "</span> <span class="o">&lt;&lt;</span> <span class="n">pab</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="cm">/* P(X &gt; Y) */</span>
</div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kt">double</span> <span class="nf">pXy</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kt">double</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="kt">double</span> <span class="n">term</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'>                <span class="n">term</span> <span class="o">*=</span> <span class="n">x</span> <span class="o">/</span> <span class="n">k</span><span class="p">;</span>
</div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'>                <span class="n">term</span> <span class="o">*=</span> <span class="n">y</span> <span class="o">/</span> <span class="n">k</span><span class="p">;</span>
</div></div><div data-line='35' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="n">ans</span> <span class="o">+=</span> <span class="n">term</span><span class="p">;</span>
</div></div><div data-line='36' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="p">&#x7d;</span>
</div></div><div data-line='37' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">&#x7d;</span>
</div></div><div data-line='38' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="n">ans</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="p">);</span>
</div></div><div data-line='39' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div><div data-line='40' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='41' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="cm">/* P(X = Y) */</span>
</div></div><div data-line='42' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kt">double</span> <span class="nf">pxy</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='43' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kt">double</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</div></div><div data-line='44' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='45' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="kt">double</span> <span class="n">term</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</div></div><div data-line='46' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</div></div><div data-line='47' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="n">term</span> <span class="o">*=</span> <span class="n">x</span> <span class="o">/</span> <span class="n">k</span> <span class="o">*</span> <span class="n">y</span> <span class="o">/</span> <span class="n">k</span><span class="p">;</span>
</div></div><div data-line='48' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="n">ans</span> <span class="o">+=</span> <span class="n">term</span><span class="p">;</span>
</div></div><div data-line='49' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">&#x7d;</span>
</div></div><div data-line='50' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="n">ans</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="p">);</span>
</div></div><div data-line='51' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div></pre></div></figure></p>

<h3 id="sample-output">Sample output</h3>

<div class="cliUB highlighter-rouge"><pre class="highlight"><code>Assume that Poisson r.v. A and B are indepedent
Parameter for A: 1.6
Parameter for B: 1.4
Number of terms to be added (100 &lt;= N &lt;= 1000): 8
P(A &gt; B) = 0.423023, P(A &lt; B) = 0.335224, P(A = B) = 0.241691
</code></pre>
</div>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>
    <p>A one-line method for writing the content of a function which
returns the factorial of a number.</p>

    <p>URL: <a href="http://progopedia.com/example/factorial/">http://progopedia.com/example/factorial/</a></p>
  </li>
  <li>
    <p>Evaluation of a function inside GDB</p>

    <p>URL: <a href="http://stackoverflow.com/q/1354731/">http://stackoverflow.com/q/1354731/</a></p>
  </li>
</ol>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:fact">

      <p>Keller, J. B. (1994). A characterization of the Poisson
distribution and the probability of winning a game. <em>The American
Statistician</em>, 48(4), 294–298.&nbsp;<a href="#fnref:fact" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Tried Range-based For Loop]]></title>
      <link href="https://vincenttam.github.io/blog/2015/02/14/tried-range-based-for-loop/"/>
    
    <updated>2015-02-14T12:42:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/02/14/tried-range-based-for-loop</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I saw an example for range-based for loop in a Stack Overflow question
and I compiled it in my own computer.<sup id="fnref:eg"><a href="#fn:eg" class="footnote">1</a></sup>  Then I got an error.</p>

<div class="cliUB highlighter-rouge"><pre class="highlight"><code>$ g++ temp1.cpp
temp1.cpp: In function ‘int main()’:
temp1.cpp:9:18: error: range-based ‘for’ loops are not allowed in C++98 mode
    for (int i : bar) {
                  ^
temp1.cpp: In function ‘void foo(int (&amp;)[3])’:
temp1.cpp:16:18: error: range-based ‘for’ loops are not allowed in C++98 mode
    for (int i : bar) {
                  ^
</code></pre>
</div>

<!-- more -->

<p>I also received similar message after I typed the command for
compiling the program with <a href="http://clang.llvm.org/" title="Another C++ compiler">clang++</a>.</p>

<h2 id="solution">Solution</h2>

<p>I searched “gcc range based for loop are not allowed in” on Google,
and realised that I forgot to add the flag <code class="highlighter-rouge">-std=c++11</code>.<sup id="fnref:sol"><a href="#fn:sol" class="footnote">2</a></sup>  After
doing so, I could successfully compile the program using either <a href="https://gcc.gnu.org/" title="GNU Compiler Collection">GCC</a>
or clang++.</p>

<h2 id="clangs-error-message">clang++’s error message</h2>

<p>I think that clang++ is better than gcc in this case because the error
message is <em>brighter</em> than the code.  The word “warning” is in purple,
while the ‘^’ is in yellow.  This helps users to see what’s wrong.</p>

<div class="cliUB highlighter-rouge"><pre class="highlight"><code>temp1.cpp:9:16: warning: range-based for loop is a C++11 extension
      [-Wc++11-extensions]
    for (int i : bar) {
               ^
temp1.cpp:16:16: warning: range-based for loop is a C++11 extension
      [-Wc++11-extensions]
    for (int i : bar) {
               ^
2 warnings generated.
</code></pre>
</div>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:eg">

      <p><a href="http://stackoverflow.com/a/26182985">c++ Range based for-loop on array passed to non-main function</a>
on Stack Overflow.&nbsp;<a href="#fnref:eg" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:sol">

      <p><a href="http://stackoverflow.com/a/22859334">Error: Range-based ‘for’ loops are not allowed in C++98 mode</a>
on Stack Overflow.&nbsp;<a href="#fnref:sol" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Compilation of C++ Programs that Depends on DISLIN on CLI]]></title>
      <link href="https://vincenttam.github.io/blog/2014/01/19/compilation-of-c-programs-that-depends-on-dislin-on-cli/"/>
    
    <updated>2014-01-19T14:59:15+08:00</updated>
    <id>https://vincenttam.github.io/blog/2014/01/19/compilation-of-c-programs-that-depends-on-dislin-on-cli</id>
    
      <content type="html"><![CDATA[<p>As a supporter of the <a href="https://www.gnu.org/">GNU</a> Project, I am not so happy to use
<a href="http://www.dislin.de/">DISLIN</a>, which comes with an <em>EULA</em>, but I don’t have time to find
out another alternative to the plotting library suggested by Prof.
Yevick in a book.<sup id="fnref:book"><a href="#fn:book" class="footnote">1</a></sup></p>

<!-- more -->

<p>A DISLIN installation guide on Ubuntu was written more than six years
ago, so I am a bit dubious that if steps 2 and 3 are still needed for
the installation using a DEB file.<sup id="fnref:blog1"><a href="#fn:blog1" class="footnote">2</a></sup>  Therefore, I overlooked an
important command and I regret this after wasting about two hours on
<a href="https://www.google.com/">Google</a>.</p>

<p>As a result, I just downloaded the DEB file from the DISLIN official
website and use the GUI tool “Ubuntu Software Centre” to install the
library.  Then I directly copied the code from the book and tried to
compile the program .</p>

<p><figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>first_graphics_prog.cpp</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c1">// Author: David Yevick
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>// Source: A Short Course in Computational Science and Engineering</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="cp">#include &lt;iostream&gt;
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>#include &lt;dislin.h&gt;&lt;/dislin.h&gt;&lt;/iostream&gt;&lt;/p&gt;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7b;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c1">// Some code for defining variables</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c1">// Omitted to avoid copyright problems</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c1">// An example of using DISLIN methods</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">qplot</span><span class="p">(</span><span class="n">array1</span><span class="p">,</span><span class="n">array2</span><span class="p">,</span><span class="n">numOfPts</span><span class="p">);</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span></div></div></pre></div></figure></p>

<p>However, the compiler gave me the message that I had used an
“undefined reference to qplot”.</p>

<p>I googled for two hours and found nothing that I can understand.  I
even tried compiling the following sample code found in section 2.7 of
<a href="http://www2.mps.mpg.de/dislin/contents.html">the official DISLIN online manual</a>.</p>

<p><figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>Sample code</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c1">// Author: Helmut Michels
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>// Source: DISLIN 10.4—A Data Plotting Library</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="cp">#include &lt;iostream&gt;
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>#include "discpp.h"&lt;/iostream&gt;&lt;/p&gt;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">main</span><span class="p">()</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7b;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Dislin</span> <span class="n">g</span><span class="p">;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">g</span><span class="p">.</span><span class="n">disini</span> <span class="p">();</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">g</span><span class="p">.</span><span class="n">messag</span> <span class="p">(</span><span class="err">“</span><span class="n">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">test</span><span class="err">”</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">g</span><span class="p">.</span><span class="n">disfin</span> <span class="p">();</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span></div></div></pre></div></figure></p>

<p>I have <em>no</em> hope on published books because their authors would expect
their students to do something easy—Use <a href="http://www.bloodshed.net/devcpp.html">Dev-C++</a> on M$ Win*, or
*nix GUI IDE like <a href="http://www.eclipse.org">Eclipse</a>.  However, some geeks <em>won’t</em> be
satisfied because GUI buttons/objects hide the commands away from
users.  As a result, they <em>don’t</em> know what tasks are invoked by
clicking the button/object.  In other words, they <em>don’t</em> know what
they are <em>actually</em> doing.  Therefore, they have the motivation to
find out the <em>real</em> command for the compilation of C++ programs that
<code class="highlighter-rouge">#include "dislin.h"</code>.</p>

<p>Stack Overflow has <em>a few or no</em> questions on the compilation of C++
programs that use DISLIN.  The most relevant one that I managed to
find is <a href="http://stackoverflow.com/q/19118465" title="Compiling dislin gfortran">question 19118465</a>.  I glanced at the answers
quickly.  They have some commands like</p>

<pre class="cli"><code class="UBMono">$ gfortran EX11_1.f90 -o progrname <span class="UBHLCode">-ldislin</span> -I/path/to/DISLIN/modules
</code></pre>

<p>Then I guessed that I need the <code class="highlighter-rouge">-ldislin</code> flag as well.  I <em>can’t</em>
truly figure out the usage of <code class="highlighter-rouge">-l</code>, <code class="highlighter-rouge">-L</code> and <code class="highlighter-rouge">-I</code> flags by just
looking at the man page of <code class="highlighter-rouge">g++</code>, so I just tried everything.  I
searched for some new pages, and returned to some web pages that I’ve
<em>already visited</em>, and continued this <em>unproductive</em> process…</p>

<p>I googled the websites and I saw the post on Linux for Research
mentioned before.  I looked at the command that begins with <code class="highlighter-rouge">g++</code> and
tried to adapt it to my needs, but it simply <em>failed</em>.</p>

<p>I thought that the official README maybe useful, so I browsed the
contents in <code class="highlighter-rouge">/usr/local/dislin/README</code>.  Some websites that teach
users to install DISLIN from a gzip tarball contain code that
manipulate the environment variables like <code class="highlighter-rouge">DISLIN</code>, <code class="highlighter-rouge">PATH</code> and
<code class="highlighter-rouge">LD_LIBRARY_PATH</code>.  But in the <code class="highlighter-rouge">README</code>, it’s clearly stated that I
don’t need to do so.</p>

<pre class="cli"><code class="UBMono">f) To make DISLIN available for general use, write the following com-
mands to your .profile or to /etc/profile

DISLIN=directory
export DISLIN
PATH=${PATH}:${DISLIN}/bin

LD_LIBRARY_PATH=$DISLIN:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH

<span class="UBHLCode">Note: The environment variable DISLIN is not necessary if DISLIN
is installed in the default directory '/usr/local/dislin'.</span>
</code></pre>

<p>I think that I <em>don’t</em> need to do the above settings, but I am <em>not</em>
sure about that.  Luckily, the following part that immediately follows
the above section gave me some hint on what I, as a newcomer to
DISLIN, can do.</p>

<pre class="cli"><code class="UBMono">4.) Compiling, Linking and Running the Example Programs

    Now you can compile, link and run the example programs in the
    directory $DISLIN/examples with the commands:

		    clink     -a exa_c      (for gcc)
		    <span class="UBHLCode">cpplink   -a exa_cpp    (for g++)</span>
		    iclink    -a exa_c      (for Intel icc)
		    sclink    -a exa_c      (Sun Studio cc)
...
</code></pre>

<p>Thus, I <em>really</em> went to <code class="highlighter-rouge">/usr/local/dislin/example</code> and compiled
<code class="highlighter-rouge">exa_cpp.cpp</code> using <code class="highlighter-rouge">cpplink</code> with the <code class="highlighter-rouge">-a</code> flag.  <em>It works! No
complaints from <code class="highlighter-rouge">g++</code>!</em> It seemed that I could give <code class="highlighter-rouge">cpplink</code> a try,
but it quickly turned out that my idea failed to work.  <code class="highlighter-rouge">g++</code> either
complained that <code class="highlighter-rouge">dislin.h</code> was <em>not</em> found, or there’s “undefined
reference” to a DISLIN function.</p>

<p>After that, I returned to Google again, and was redirected to the
<em>same</em> post on Linux for Research again.  I glanced through the <em>same</em>
command that started with <code class="highlighter-rouge">g++</code>.</p>

<div class="cliUB highlighter-rouge"><pre class="highlight"><code>$ g++ test.cpp -lXt -ldislin -lm
</code></pre>
</div>

<p>This time, I could read the sentence below the above command.</p>

<quote>
    Don't forget the `-lXt`
</quote>

<p>I finally realised that I had forgotten an important principle in
programming: <em>Don’t</em> do too much at one time.  At the very first
stage, I need to get things done, though the approach is <em>not</em>
elegant.</p>

<p>With the above principle in my mind, I could merely compile a C++
program that made use of DISLIN by making the following changes in
both the source file and the command that I issued.</p>

<p><figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>Sample code</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c1">// Author: David Yevick
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>// Source: A Short Course in Computational Science and Engineering</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="cp">#include &lt;iostream&gt;
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>#include "/usr/local/dislin/dislin.h"&lt;/iostream&gt;&lt;/p&gt;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7b;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c1">// Some code for defining variables
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>// Omitted to avoid copyright problems
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>// An example of using DISLIN methods</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="n">qplot</span><span class="p">(</span><span class="n">array1</span><span class="p">,</span><span class="n">array2</span><span class="p">,</span><span class="n">numOfPts</span><span class="p">);</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span></div></div></pre></div></figure></p>

<p>In the terminal, I typed the following command.</p>

<div class="cliUB highlighter-rouge"><pre class="highlight"><code>$ g++ foo.cpp -lXt -ldislin -lm
</code></pre>
</div>

<p><em>It works!</em> Critical readers will complain about the way that I
include <code class="highlighter-rouge">dislin.h</code>.  I’m not satisfied with this either.  Another
obvious missing part for those who want to customise the name of the
output executable file is the <code class="highlighter-rouge">-o</code> flag.  I <em>delibrately</em> did this so
as to keep things <em>simple and clear</em>.</p>

<p>After trying the <code class="highlighter-rouge">-l</code>, <code class="highlighter-rouge">-L</code> and <code class="highlighter-rouge">-I</code> flags of the command <code class="highlighter-rouge">g++</code>, I
realised that the <code class="highlighter-rouge">-I</code> flag will do.</p>

<p>However, when I tried to do the <em>same</em> task for another time, it
surprisingly <em>failed</em>.  Looking closely at the two versions, we can
draw the following conclusion.</p>

<pre class="cli"><code class="UBMono"># `DISLIN' is a variable that represents the path of DISLIN.
# In the default case, it is `/usr/local/dislin'.
$ g++ <span class="err">-lXt -ldislin -lm</span> -I$(DISLIN) foo.cpp -o foo.out # Wrong!
$ g++ foo.cpp -o foo.out <span class="UBHLCode">-lXt -ldislin -lm</span> -I$(DISLIN) # Correct!
</code></pre>

<p><img src="/images/posts/DISLIN/dislin-compile-140119.png" alt="message_from_g++" /></p>

<p>I conclude this post with the fact that the flags <code class="highlighter-rouge">-g -Wall</code> can be
put either before or after <code class="highlighter-rouge">foo.cpp</code>.</p>

<p>Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:book">

      <p>Yevick, D.  (2012).  <em>A Short Course in Computational Science and
Engineering: C++, Java and Octave Numerical Programming with Free
Software Tools</em>.  Cambridge University Press.&nbsp;<a href="#fnref:book" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:blog1">
      <p>See <a href="http://linux4research.blogspot.hk/2007/05/install-and-use-dislin-under-linuxe.html"><em>Linux for Research</em></a> for the post.&nbsp;<a href="#fnref:blog1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Standards for C++ Naming &#9733;]]></title>
      <link href="http://www.nws.noaa.gov/oh/hrl/ihfs/standards/html/C++_naming.htm"/>
    
    <updated>2014-01-19T05:31:35+08:00</updated>
    <id>https://vincenttam.github.io/blog/2014/01/19/standards-for-c-naming</id>
    
      <content type="html"><![CDATA[<p>This is what I’ve longed for. What makes it even better is that it’s a
website from a domain that ends in <code class="highlighter-rouge">.gov</code>, making it a reliable source
of information.</p>

<p>Having a good naming convention can greatly reduce the number of
syntax errors in the source code and improve its readability.</p>

<p>Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.</p>

<p><a rel="full-article" href="https://vincenttam.github.io/blog/2014/01/19/standards-for-c-naming/">&infin; Permalink</a></p>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[C++ Hello World Using clang_complete and Vim]]></title>
      <link href="https://vincenttam.github.io/blog/2013/12/30/c-hello-world-using-clang-complete-and-vim/"/>
    
    <updated>2013-12-30T01:52:00+08:00</updated>
    <id>https://vincenttam.github.io/blog/2013/12/30/c-hello-world-using-clang-complete-and-vim</id>
    
      <content type="html"><![CDATA[<p>Many posts on the advantages of <a href="https://github.com/Rip-Rip/clang_complete">clang_complete</a> have already been
posted.  For example, there’s <a href="http://www.zwiener.org/vimautocomplete.html#sec2">a demonstration of the plugin</a> on
Mac.  If you can understand Chinese (or you have a translator that
<em>truly</em> understands it), you may even look at more sites, such as
<a href="http://aknow-work.blogspot.hk/2013/04/vim-clangcomplete.html">Chen’s post</a>.</p>

<!-- more -->

<p>The authors of the above posts are likely to work in the IT sector.
For new comers of programming, they may like to start from zero.  On
which platform can they start from? I’d recommend popular *nix
distributions (e.g.  Debian-based/Fedora-based ones) due to their
package managing tools like <a href="http://wiki.debian.org/Apt">APT</a> or <a href="http://yum.baseurl.org">YUM</a>.  For a M$ Vis* Stu*
like code completion on <a href="http://www.vim.org">Vim</a>, <a href="https://github.com/Rip-Rip/clang_complete">clang_complete</a> is the right answer,
but it is often hard to install on M$ Win*, but the installation is
incredibly easy on *nix.<sup id="fnref:inst_ms"><a href="#fn:inst_ms" class="footnote">1</a></sup><sup id="fnref:inst_nix"><a href="#fn:inst_nix" class="footnote">2</a></sup></p>

<p>Many writers of posts on <a href="https://github.com/Rip-Rip/clang_complete">clang_complete</a> installation stopped
writing further after completing the whole installation and
configuration of the plugin, and I haven’t seen any post that uses
“hello world” as an example.  This is alright since many users of
<a href="http://www.vim.org">Vim</a> are experienced programmers who would like to demonstrate some
advanced features of the editor with the additional plugin (e.g.
jumping between ctags), and a simple <code class="highlighter-rouge">hello.cpp</code> can’t be used for
that.  Moreover, many teachers would teach programming on M$ Win*,
and even if a *nix desktop is used, the work is most likely done
using an IDE on GUI  (<a href="http://www.gnu.org/software/emacs">Emacs</a> is a text editor and IDE that runs on
command line.)  …  The concept of modal editing may be too hard for
newbies to accept it, and you need to get several commands right
before entering any text into a buffer.  The steep learning curve
might frighten learners away from <a href="http://www.vim.org">Vim</a>…  Some computer users
believe in the myth that <a href="http://www.vim.org">Vim</a> and <a href="http://www.gnu.org/software/emacs">Emacs</a> are too old and nobody use
them.</p>

<p>Anyways, the mixed use of both the built-in omni-complete function of
<a href="http://www.vim.org">Vim</a> (invoked by <code class="highlighter-rouge">&lt;C-n&gt;</code> or <code class="highlighter-rouge">&lt;C-p&gt;</code>) and the popup menu of
<a href="https://github.com/Rip-Rip/clang_complete">clang_complete</a> (invoked by <code class="highlighter-rouge">&lt;C-x&gt;&lt;C-u&gt;</code>) to write a “hello world”
program is a productive way of doing the job.  However, due to the
limitations of human mind, we can remember very few unfamiliar things
at a time.  This is not the case in storage devices.  They can capture
every word that come out of our mind, though many physical means of
storage of information are subject to aging, especially those in the
past…  Luckily, information technology allows words, and even fonts,
to be replicated efficiently and almost identically.  This has brought
the human race a variety of new subjects, such as web *ng, and has
extended our old knowledge into many fields, such as typography…  In
addition, the advancement of technology enables us to capture visible
images and copy it rapidly, and I’ve recorded my experience of “hello
world” using <a href="https://github.com/Rip-Rip/clang_complete">clang_complete</a> with <a href="http://www.vim.org">Vim</a> on a series of screenshots.</p>

<p>In addition to adding Wu’s custom VIMRC configuration for
<a href="https://github.com/Rip-Rip/clang_complete">clang_complete</a>, I’ve also installed <a href="https://github.com/garbas/vim-snipmate">vim-snipmate</a> and
<a href="https://github.com/honza/vim-snippets">vim-snippets</a> for more auto-complete mappings.<sup id="fnref:wu"><a href="#fn:wu" class="footnote">3</a></sup></p>

<p>Before actually beginning the steps for writing a “hello world”, we
should know that we <em>won’t</em> learn anything from successes.  It’s
<em>failures</em> that help us reflect on the mistakes in our understand of
theories.  Therefore, I’ll <em>deliberately</em> find something wrong, and
elaborate on that using some ideas.  In other words, that’s “to blow
water” in Cantonese.</p>

<h2 id="Ⅰ-comparison-between-clang_complete-and-the-editors-built-in-completion-in-typing-includeiostream">Ⅰ. Comparison between clang_complete and the editor’s built-in completion in typing <code class="highlighter-rouge">#include&lt;iostream&gt;</code></h2>

<h3 id="Ⅰ1-the-editors-built-in-completion">Ⅰ.1 The editor’s built-in completion</h3>

<p>The following “hello world” procedure contains some <em>wrong</em> steps.</p>

<p><img class="fancybox" src="/images/posts/ClangComplete/inc-complete.gif" width="800" alt="‘Figure 1’ [‘fig1’]" ></p>

<ol>
  <li>Type <code class="highlighter-rouge">inc&lt;Tab&gt;</code>.</li>
  <li><a href="https://github.com/honza/vim-snippets">Vim-snippets</a> complete the code, with <code class="highlighter-rouge">stdio.h</code> as default.  The
file name of the included file is selected so that you can input
something else.</li>
  <li>Since <code class="highlighter-rouge">cout</code> is used later, we need to <code class="highlighter-rouge">#include&lt;iostream&gt;</code>.
First type <code class="highlighter-rouge">io</code> to override the default input.</li>
  <li>Type <code class="highlighter-rouge">&lt;C-n&gt;</code> or <code class="highlighter-rouge">&lt;C-p&gt;</code> to get a completion list.</li>
  <li>Select <code class="highlighter-rouge">iostream</code> (without ‘s’).</li>
  <li>Continue typing the whole program, and compile it.</li>
  <li>The source code fails!</li>
</ol>

<p>Obviously, there’s a syntax error at the line <code class="highlighter-rouge">#include&lt;iostream&gt;</code>.
Thinking about the auto-completion function again, one will notice
that the correct step is to press <code class="highlighter-rouge">&lt;Esc&gt;</code> after step 1, and use <code class="highlighter-rouge">ci&lt;</code>
to clear the code inside the <code class="highlighter-rouge">&lt;&gt;</code> block, that’s a good try, but I
personally think that the steps can be more beautiful.</p>

<h3 id="Ⅰ2-clang_completes-solution">Ⅰ.2 clang_complete’s solution</h3>

<p>This is just a <em>part</em> of correct steps.  I leave the remaining parts
of codes of this simple program into later sections.</p>

<p><img class="fancybox" src="/images/posts/ClangComplete/inc-complete-clang.gif" width="800" alt="‘Figure 2’ [‘fig2’]" ></p>

<p>This time, after typing <code class="highlighter-rouge">#</code> at the beginning of the line, press
<code class="highlighter-rouge">&lt;C-x&gt;&lt;C-u&gt;</code> to use the automatic completion list, and choose the <code class="highlighter-rouge">#
include</code> option with the <code class="highlighter-rouge">$`header'</code> surrounded by a <code class="highlighter-rouge">&lt;&gt;</code> block,
<em>not</em> a double quote.  Use <code class="highlighter-rouge">&lt;Alt-Tab&gt;</code> to select the inner <code class="highlighter-rouge">&lt;&gt;</code> block
and type <code class="highlighter-rouge">io&lt;C-n&gt;</code> to use the built-in (<em>not</em> plugin) function to
complete the code. (The <code class="highlighter-rouge">&lt;Alt-Tab&gt;</code> keystroke doesn’t work in GUI,
since it means changing the window on focus.)</p>

<p>Note: In this method, <code class="highlighter-rouge">stdio.h</code> needs to be included.  Otherwise, the
built-in insert completion popup menu containing <code class="highlighter-rouge">iostream</code> will not
be shown.</p>

<h2 id="Ⅱ-completion-of-using-namespace-std">Ⅱ. Completion of <code class="highlighter-rouge">using namespace std;</code></h2>

<ol>
  <li>Without <a href="https://github.com/Rip-Rip/clang_complete">clang_complete</a>: Directly type in everything, or use
<code class="highlighter-rouge">&lt;C-n&gt;</code> for <em>word-by-word completion</em>.</li>
  <li>With <a href="https://github.com/Rip-Rip/clang_complete">clang_complete</a>: The completion menu can complete the whole
line.</li>
</ol>

<p>Analysis: Finding an item from a menu requires coordination of our
eyes and hands, while typing the code directly requires more memory.
For a newbie, the former should be easier since he/she doesn’t waste
time to recall his/her memory.  For a geek, the later should be faster
since the process has been repeated for many time.  Luckily, being the
second in the popup list, the problem of reaction time does not matter
much if one looks at the list from the top to the bottom.  Moreover,
typing the code directly may lead to syntax errors.  This problem can
be overcome if one has the capability to read the error message from
the compiler and to browse code quickly.</p>

<p><img class="fancybox" src="/images/posts/ClangComplete/using-complete.png" width="800" alt="‘Without clang_complete: word-by-word completion’ [‘fig3’]" ></p>

<p><img class="fancybox" src="/images/posts/ClangComplete/using-clang.gif" width="800" alt="‘With clang_complete: completion of the whole line’ [‘fig4’]" ></p>

<p>The remaining parts of this post <em>doesn’t</em> make use of the
<a href="https://github.com/Rip-Rip/clang_complete">clang_complete</a> plugin.</p>

<h2 id="Ⅲ-the-main-method">Ⅲ. The main method</h2>

<p>Just typing <code class="highlighter-rouge">main&lt;Tab&gt;</code> will do.  That’s from <a href="https://github.com/honza/vim-snippets">vim-snippets</a>.</p>

<p><img class="fancybox" src="/images/posts/ClangComplete/prog.gif" width="800" alt="‘Figure 5’ [‘fig5’]" ></p>

<h2 id="Ⅳ-greeting-the-world">Ⅳ. Greeting the world!</h2>

<p>If you type <code class="highlighter-rouge">cout&lt;Tab&gt;</code>, you’ll get <code class="highlighter-rouge">std::cout&lt;&lt;  &lt;&lt;std::endl;</code>, with
the cursor located in between the two whitespace characters in the
middle.  Using a regular expression to delete the <code class="highlighter-rouge">std::</code> in front of
<code class="highlighter-rouge">cout</code> and <code class="highlighter-rouge">endl</code>.</p>

<p><img class="fancybox" src="/images/posts/ClangComplete/cout.gif" width="800" alt="‘Figure 6’ [‘fig6’]" ></p>

<h2 id="Ⅴ-getting-the-indentation-correct">Ⅴ. Getting the indentation correct</h2>

<p>Modifying the c.snippet file maybe a bit troublesome, and may bring
strange consequences to the plugin.  If you don’t have time to study
the plugin, you may not like to bother it.  Manually decreasing the
indentation of the line <code class="highlighter-rouge">return 0;</code> each time is not likely to be an
elegant solution for <a href="http://www.vim.org">Vim</a> Lovers.  The actual way to fix the problem
is using the command <code class="highlighter-rouge">gg=G</code> in the normal mode.<sup id="fnref:vim_book"><a href="#fn:vim_book" class="footnote">4</a></sup></p>

<p><img class="fancybox" src="/images/posts/ClangComplete/cindent.gif" width="800" alt="‘Figure 7’ [‘fig7’]" ></p>

<h2 id="Ⅵ-running-the-program">Ⅵ. Running the program</h2>

<p>For some newbies, it might be too much for them to digest if I discuss
more on the creation of a sample makefile, which automatically
executes more complicated compiling commands with a simple <code class="highlighter-rouge">make</code>
command, searching “makefile tutorial” on the web will do.  If you
don’t like the clang compiler, just substitute <code class="highlighter-rouge">clang++</code> with <code class="highlighter-rouge">g++</code>.</p>

<p>According to Henri Poincaré, a French mathematician, things are
beautiful if they are simple.  Repetition of facts build up our
understanding.  I end this post with a short and simple command that
can be repeatedly used to compile CPP source files with different file
names.  For more details about that, refer to my earlier post titled
<a href="/blog/2013/12/11/fast-compilation-and-execution-of-source-code/"><em>Fast Compilation and Execution of Source Code</em></a>.</p>

<p><img class="fancybox" src="/images/posts/ClangComplete/run.gif" width="800" alt="‘Figure 8’ [‘fig8’]" ></p>

<p>Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:inst_ms">

      <p><a href="http://blog.chinaunix.net/uid-53564-id-3558537.html"><em>在win/gvim中以DLL方式使用clang_complete</em></a> by slimzhao in
ChinaUnix.&nbsp;<a href="#fnref:inst_ms" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:inst_nix">

      <p><a href="http://changyy.pixnet.net/blog/post/31706673-%5Bvim%5D-using-clang_complete-plugin-@-ubuntu-12.04"><em>[VIM] using clang_complete plugin @ Ubuntu 12.04</em></a> by
Yaun-Yi Chang in 第二十四個夏天後.&nbsp;<a href="#fnref:inst_nix" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:wu">

      <p><a href="http://blog.wuwon.id.au/2011/10/vim-plugin-for-navigating-c-with.html"><em>A Vim plugin for navigating C++ with libclang</em></a> by Kevin Wu
Won in A Small Matter of Programming.&nbsp;<a href="#fnref:wu" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:vim_book">

      <p><a href="ftp://ftp.vim.org/pub/vim/doc/book/vimbook-OPL.pdf"><em>Vi iMproved—Vim</em></a> p.73 by Steve Oualline.&nbsp;<a href="#fnref:vim_book" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
