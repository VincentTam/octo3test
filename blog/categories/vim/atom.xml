<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2017-01-16T04:14:05+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    <email><![CDATA[your-email@domain.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[A Quick Markdown Syntax Error Detection for Writing MathJax Equations in Octopress Posts (4)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-4/"/>
    
    <updated>2016-12-13T04:47:36+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-4</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I’m recently enhancing the $\rm \LaTeX$ code for inline limits.  For
the reason of doing so, you may refer to the external link of
<a href="http://meta.math.stackexchange.com/a/15077/290189">my recent linklog</a> <em>Inline Limit Rendering</em>.</p>

<h2 id="problem">Problem</h2>

<p>In the previous post in this series written over one year ago, I have
included a code block which enables <a href="/blog/2015/08/04/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/#include-the-script-in-the-content">deferred MathJax loading</a>.
However, I manually added this chuck of code in the HTML file
generated by <a href="http://kramdown.gettalong.org/">kramdown</a>, which created the problem described in the
next subsection <em>A problem with Vim’s folding arised</em>.</p>

<h2 id="solution">Solution</h2>

<p>Firstly, save the code for loading <a href="https://www.mathjax.org/">MathJax</a> in <a href="/blog/2015/08/04/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/#include-the-script-in-the-content">the previous
post</a> in this series in a separate file <code class="highlighter-rouge">~/script.html</code>.  Then
use the following commands <em>within</em> Vim in order to avoid leaving the
current buffer and to improve efficiency.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>9,$w! ~/temp.mkd
!kramdown ~/temp.mkd &gt; ~/temp.html
!cat ~/{temp,script}.html &gt; ~/test.html
</code></pre>
</div>

<p>The digit <code class="highlighter-rouge">9</code> in the first command <em>isn’t</em> exact.  Change it to any
line number that separates the <a href="http://jekyllrb.com/docs/frontmatter/">yaml front matter</a> from the
post content.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[$\rm \LaTeX$-Suite in Portable Git]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/09/latex-suite-in-portable-git/"/>
    
    <updated>2016-04-09T14:34:38+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/09/latex-suite-in-portable-git</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>A year ago, I was using msysgit on M$ Win* 7. Its support for
Unicode characters <em>isn’t</em> so good, and I <em>can’t</em> write a text file
with accents like “café” in the Vim editor that shipped with msysgit.
As a result, I needed GVim for editing my $\rm \LaTeX$ documents.</p>

<p>Unluckily, unlike Linux, the GVim can <em>never</em> have forward control.
Therefore, I needed to switch windows between GVim and Git Bash.</p>

<p>More importantly, if I want to apply the Linux skills and the tools on
M$ Win*, I need <em>portable</em> programs excutable on a USB unless I
carry my laptop.</p>

<p>Luckily, the bash shell in Git for Windows has improved a lot.  The
accents are well supported.  Then, I have switched from GVim to the
embedded Vim in Git for Windows.  Luckily, the setup of Vundle was
smooth. Most of the installed plugins work fine in terminal Vim.</p>

<h2 id="problem-1">Problem 1</h2>

<p>In the post <a href="/blog/2016/03/20/git-portable-home-path/"><em>Git Portable Home Path</em></a>, a BAT file is included so
that the home folder and the <code class="highlighter-rouge">HOMEDRIVE</code> environment are automatically
set.  Since the <em>same</em> Git repository can be shared among multiple
devices, such as my Linux desktop, my M$ Win* 7 laptop, and my USB
stick, a bare repository is needed for efficient pulling and pushing
of Git commits.  Since I work outside home, I place a bare Git repo in
my USB stick.  However, for each local Git repository stored in the
USB stick (under <code class="highlighter-rouge">~/local_repo</code>, a.k.a.
<code class="highlighter-rouge">$HOMEDRIVE/PortableGit/home/owner/local_repo</code>), I need to run the
following command for each time I use Git Bash.</p>

<h2 id="problem-2">Problem 2</h2>

<p>After making some changes on a $\rm \TeX$ file, I compiled the file
using Mik$\rm \TeX$ Portable.</p>

<ol>
  <li>Browse the folder <code class="highlighter-rouge">$HOMEDRIVE/MikTeXPortable/</code>.</li>
  <li>Double-click on <code class="highlighter-rouge">miktex-portable.cmd</code>.</li>
  <li>In the Command Prompt popped up, switch to
<code class="highlighter-rouge">$HOMEDRIVE/PortableGit/home/owner/local_repo</code>.</li>
  <li>Type <code class="highlighter-rouge">pdflatex file.tex</code>.</li>
</ol>

<p>This sounds really slow.  The goal is to find a more efficient $\rm
\LaTeX$ editing workflow.</p>

<p>That’s <em>not</em> the end.  Another bad news came from <code class="highlighter-rouge">eu1lmr.fd</code>.  I’ve
got error similar to <a href="http://bbs.ctex.org/forum.php?mod=viewthread&amp;tid=75679">fengbaobao6’s</a>.  The compilation was
<em>stuck</em> at <code class="highlighter-rouge">...\tex\latex\euenc\eu1lmr.fd</code>.  Then an error was shown:
“Fontconfig error: Cannot load config file”.</p>

<!-- more -->

<h2 id="solution-1">Solution 1</h2>

<ol>
  <li>Create a file <code class="highlighter-rouge">~/.bashrc</code> if it <em>doesn’t</em> exist.</li>
  <li>Write an array consisting of all local Git repositories saved in
the USB stick in BASHRC.</li>
  <li>Then Write a for loop to reset the remote location.</li>
</ol>

<h2 id="solution-2">Solution 2</h2>

<p>Searching the error text, I found kounoupis’s answer on
<a href="http://askubuntu.com/a/708541">Ask Ubuntu</a>.  Even though the <code class="highlighter-rouge">export</code> command <em>didn’t</em>
work for me, I still found his answer informative.</p>

<p>Finally, reading <code class="highlighter-rouge">miktex-portable.cmd</code>, I gave up on investigating the
problem, and added the last line of this file into BASHRC since I have
other important things to do.</p>

<p><figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>Actual CMD file found in Mik$\rm \TeX$ Portable</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>@echo off
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>cd /d %~dp0
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>miktex\bin\miktex-taskbar-icon.exe
</div></div></pre></div></figure></p>

<p>To include Mik$\rm \TeX$ into <code class="highlighter-rouge">PATH</code>, I first extracted <code class="highlighter-rouge">$HOMEDRIVE</code>
in the form <code class="highlighter-rouge">/f</code> instead of <code class="highlighter-rouge">F:/</code>.  If not, Mik$\rm \TeX$ <em>won’t</em>
work.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Here’s my BASHRC for Git Bash.</p>

<p><figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>My BASHRC</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>stty -ixon
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>cd ~
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>HOMEDRIVE=$(perl -e '($var) = $ENV&#x7b;HOMEDRIVE&#x7d; =~ /([A-Z]):/; print "/".lc($1)')
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>if [ $(perl -e '($var) = $ENV&#x7b;PATH&#x7d; !~ /tex/i; print STDOUT $var') ]
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>then
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>    echo "No LaTeX found!  Added $HOMEDRIVE/MikTeXPortable/miktex/bin
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    to path."
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    PATH=$PATH:$HOMEDRIVE/MikTeXPortable/miktex/bin
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    echo "IMPORTANT: Close MikTeX Taskbar icon before exit."
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    echo "Otherwise this shell WON'T close."
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>    miktex-taskbar-icon
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>fi
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>loc_repo=(
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>'resume2015'
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>)
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'>for f in $&#x7b;loc_repo[@]&#x7d;; do
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>    cd $f
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>    git remote set-url origin $HOMEDRIVE/$f.git
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>    cd -
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'>done
</div></div></pre></div></figure></p>

<p>If the setup is correct, then <code class="highlighter-rouge">\ll</code> in $\rm \LaTeX$-Suite should
automatically trigger the $\rm \LaTeX$ compilation.  I give up on
finding ways to open a viewer with <code class="highlighter-rouge">\lv</code> since I can use the keyboard
to switch to a web browser to see the compiled PDF file <em>without</em>
installing another PDF viewer in my USB stick.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I’ve learnt some Perl and bash after writing this BASHRC.</p>

<ol>
  <li>A little bit of Perl
    <ul>
      <li><code class="highlighter-rouge">$ENV{HOMEDRIVE}</code> for extracting the environment variable
  <code class="highlighter-rouge">HOMEDRIVE</code>.</li>
      <li><code class="highlighter-rouge">/(regex_pat)/;</code> for extracting matching string to capture
  groups <code class="highlighter-rouge">$1</code>, <code class="highlighter-rouge">$2</code>…  (The <code class="highlighter-rouge">()</code> around <code class="highlighter-rouge">regex_pat</code> is
  <em>crucial</em>.)</li>
      <li><code class="highlighter-rouge">.</code> for string concatenation.</li>
      <li><code class="highlighter-rouge">lc()</code> for converting a string to lowercase.</li>
    </ul>
  </li>
  <li>Bash for loop writing: described in <a href="/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash/">one of my recent posts</a>.</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Searching Git Commit Messages]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/03/searching-git-commit-messages/"/>
    
    <updated>2016-04-03T19:42:33+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/03/searching-git-commit-messages</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>The solution for the problem posed in the title is pretty simple.  For
instance, I want to find all Git commits whose commit message contains
“HTTPS”.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<div class="cliUB highlighter-rouge"><pre class="highlight"><code>$ git log -2 --grep="HTTPS"
commit 7400582e268f4a5b776269cf0cc08c04886a4769
Author: Vincent Tam &lt;fake@live.hk&gt;
Date:   Sun Mar 20 20:19:47 2016 +0800

    Updated my Rakefile with HTTPS

commit b6f4f1fc872affc1107b330042d7b43b45e60595
Author: Vincent Tam &lt;fake@live.hk&gt;
Date:   Mon Feb 8 00:45:02 2016 +0800

    A new article about Flair, Octopress and HTTPS
</code></pre>
</div>

<p>However, I think that the output <em>isn’t</em> compact enough.  I would like
to display the following information.</p>

<div class="cliUB highlighter-rouge"><pre class="highlight"><code>&lt;short SHA1&gt; &lt;commit time&gt; &lt;commit message title&gt;
</code></pre>
</div>

<!-- more -->

<h2 id="solution">Solution</h2>

<div class="cliUB highlighter-rouge"><pre class="highlight"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s"
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 8 00:45:02 2016 +0800 A new article about Flair, Octopress and HTTPS
</code></pre>
</div>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>Some pretty formats in Git
    <ul>
      <li><code class="highlighter-rouge">%h</code>: short SHA1</li>
      <li><code class="highlighter-rouge">%H</code>: full SHA1</li>
      <li><code class="highlighter-rouge">%an</code>: author name</li>
      <li><code class="highlighter-rouge">%cd</code>: commit date</li>
      <li><code class="highlighter-rouge">%s</code>: subject</li>
      <li><code class="highlighter-rouge">%b</code>: body</li>
    </ul>
  </li>
  <li>Automatically escape special characters in Vim
    <ul>
      <li>
        <p>Adding a backslash before <em>each</em> <code class="highlighter-rouge">%</code> in</p>

        <div class="cliUB highlighter-rouge"><pre class="highlight"><code>  :r !git log -2 --grep="HTTPS" --pretty="\%h \%cd \%s"
</code></pre>
        </div>

        <p>is tedious and prone to errors.</p>
      </li>
      <li>
        <p>A more convenient way</p>

        <div class="cliUB highlighter-rouge"><pre class="highlight"><code>  :exec escape('r !git log -2 --grep="HTTPS" --pretty="%h %cd %s"', '%')
</code></pre>
        </div>
      </li>
    </ul>
  </li>
</ol>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">

      <p>To avoid junk mail, I replaced the first four letters of my email
address with <code class="highlighter-rouge">fake</code>.&nbsp;<a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Portable Home Path]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path/"/>
    
    <updated>2016-03-20T17:47:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often included Unicode characters in my commit messages, such as
“Committed in a café”.  Since I <em>couldn’t</em> input the character ‘é’
inside the <a href="http://www.vim.org">Vim</a> editor shipped with msysgit, and the <code class="highlighter-rouge">curl</code> utility
<em>didn’t</em> get along well with my <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>
I decided to <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">upgrade it</a>.</p>

<p>Then I set up things after the installation of <a href="https://git-for-windows.github.io/">Git for Windows</a>
so that it works well with <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> now.<sup id="fnref:setup"><a href="#fn:setup" class="footnote">1</a></sup>  After that, I
thought that it would be great if I can set it up on a USB stick so
that the Vim editor with the powerful plugins can be executed on
<em>every</em> M$ Win* 7 machine.</p>

<p>The first Google search result for “git portable” is the webpage for
Git for Windows downloads.  To get it installed on a USB device,
<em>don’t</em> click “Save file” for the dialog box that popped up upon the
page is loaded.  <em>Choose the “thumbdrive edition”.</em></p>

<h2 id="problem">Problem</h2>

<p>Each time I opened the Vim editor from Portable Git Bash from the USB,
a new <code class="highlighter-rouge">.viminfo</code> file was created in the home folder of current user
in the C drive.  (e.g. <code class="highlighter-rouge">C:\Users\Foo\.viminfo</code>)  Therefore, it could
be deduced that VIM installed (under <code class="highlighter-rouge">/usr/share/vim/vim74</code>) in the
USB <em>couldn’t</em> load the configurations from <code class="highlighter-rouge">.vimrc</code> stored on the
<em>same</em> USB.  What an irony!</p>

<p><strong>How can one build a truly <em>portable</em> Vim in the USB stick?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>Searching “git portable home path” on Google, I found
<a href="http://markb.co.uk/portable-git-windows-setting-home-environment-variable.html">an article about setting <code class="highlighter-rouge">$HOME</code> and SSL keys for GitHub</a>.
However, it was written <em>several years ago</em>.  In the current version
of Git for Windows, <code class="highlighter-rouge">git-bash.bat</code> <em>doesn’t</em> even exist.</p>

<p>Another search result was <a href="http://stackoverflow.com/a/3455231">a Stack Overflow question</a>.  I
tried copying <a href="http://stackoverflow.com/users/5991/dgw">dgw</a>’s <a href="https://gist.github.com/533267">wrapper</a> into <code class="highlighter-rouge">git-bash-portable.bat</code>.  I
adapted it to my installed copy of Git Portable by changing the
extension name at the last line from <code class="highlighter-rouge">bat</code> to <code class="highlighter-rouge">exe</code>.  Unluckily, it
took a long time to load the Portable Git Bash on clicking the batch
file.</p>

<h2 id="solution">Solution</h2>

<p>I found <a href="https://github.com/git-for-windows/git/issues/320#issuecomment-140278002">Jason Cemra’s comment on issue #320</a> of Git for Windows
on GitHub extremely useful.</p>

<p><figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>Launch Portable Git Bash with proper a home folder</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>rem Setup environment (replace 'user' with your desired username)
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>set HOMEDRIVE=%~d0
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>set HOME=home/owner
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>set USERPROFILE=%HOME%
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>rem Launch the git bash
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>start git-bash.exe
</div></div></pre></div></figure></p>

<p>I borrow the line <code class="highlighter-rouge">set HOMEDRIVE=%~d0</code> from <a href="http://stackoverflow.com/users/5991/dgw">dgw</a> since the drive
letter of the USB can <em>change</em>.  This facilitates the process of
adjusting the path of the <code class="highlighter-rouge">origin</code> when it comes to pushing a non-bare
Git repository in the USB device to a bare one in the <em>same</em> device.
(If the Win* machine <em>doesn’t</em> have Git and Vim installed, I use the
ones in my USB stick.  Otherwise, I use the installed versions of
those softwares.)</p>

<h2 id="remarks">Remarks</h2>

<p>Since the shell of a Vim session invoked by Git Bash is automatically
set to <code class="highlighter-rouge">/usr/bin/bash</code>, it is expected that
<a href="http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/">Zaadi’s VIMRC configuration</a> for automatic installation of
<a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> works.  Though I’m using the version written two years ago,
it still functions well.</p>

<p>To write in $\rm \LaTeX$ on <em>every</em> Win* 7 device, I also copied the
<a href="http://miktex.org/portable">Mik$\rm \TeX$ Portable</a> from my laptop to my USB stick.</p>

<p>I practised my <code class="highlighter-rouge">sed</code> skills by using <code class="highlighter-rouge">sed '2 i set HOMEDRIVE=%~d0'</code> to
insert contents <em>before</em> the second line.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:setup">

      <p>See the newest series <em>Git for Windows, Curl, Gist.vim with
Vundle</em> for details.&nbsp;<a href="#fnref:setup" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim with Vundle (5)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/29/git-for-windows-curl-gist-dot-vim-with-vundle-5/"/>
    
    <updated>2016-02-29T00:35:30+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/29/git-for-windows-curl-gist-dot-vim-with-vundle-5</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3/">the third post of this series</a>, I ran the editor command</p>

<div class="cli highlighter-rouge"><pre class="highlight"><code>:!git config --list
</code></pre>
</div>

<p>inside <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>, but I got a fatal error.  I
found out how to get <a href="https://github.com/mattn/gist-vim">Gist.vim</a> work <em>without</em> solving this problem.</p>

<h2 id="problem">Problem</h2>

<p><strong>How to avoid this fatal error?</strong></p>

<div class="cli highlighter-rouge"><pre class="highlight"><code>C:\Windows\system32\cmd.exe /c (git config --global --list)
fatal: unable to read config file 'C:\Temp\PortableApps\gVimPortable\Data\settin
gs/.gitconfig': No such file or directory
shell returned 128
Hit any key to close this window...
</code></pre>
</div>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I forgot <a href="http://polymerhk.com/articles/2016/02/03/27363/">this article about programming</a> that I’d read several
weeks ago.  I should have pay more attention of the error message
itself, rather than the Google search results of this message.  Hence,
creating a symbolic link for <code class="highlighter-rouge">C:\Users\foo\.gitignore</code> to the
<code class="highlighter-rouge">path/to/Data/settings</code> folder.</p>

<h2 id="remarks">Remarks</h2>

<p>While writing this post, I re-read
<a href="/blog/2016/02/09/rake-aborted-due-to-a-vim-swap-file/"><em>Rake Aborted Due to a Vim Swap File</em></a> so as to find the URL of
the article about programming.  I discovered a broken link in the
GitHub page for <a href="https://github.com/imathis/octopress/issues/600#issuecomment-6206116">Octopress issue #600</a>.  From the list of
branches in the homepage for this GitHub project, I found <code class="highlighter-rouge">site-2.1</code>,
on which commit <a href="https://github.com/imathis/octopress/commit/2399008">2399008</a> was located.  Therefore, I made commit
<a href="https://github.com/VincentTam/vincenttam.github.io/commit/68b0adb">68b0adb</a> in the repository for this blog.</p>

]]></content>
    
  </entry>
  
</feed>
